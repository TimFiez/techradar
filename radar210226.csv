name,ring,quadrant,isNew,description
Azure DevOps,Trial,Platforms,FALSE,<p><strong><a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a></strong> services contain a set of managed services, including hosted Git repos, CI/CD pipelines, automated testing tooling, backlog management tooling and artifact repository. We've seen our teams getting more experience in using this platform with good results, which means Azure DevOps is maturing. We particularly like its flexibility; it allows you to use the services you want even if they're from different providers. For instance, you could use an external Git repository while still using the Azure DevOps pipeline services. Our teams are especially excited about <a href="https://azure.microsoft.com/en-us/services/devops/pipelines/">Azure DevOps Pipelines</a>. Nevertheless, all the services offer a good developer experience that helps our teams deliver value.</p>
Airflow,Adopt,Tools,TRUE,<p><strong><a href="https://airflow.apache.org/">Airflow</a></strong> remains our most widely used and favorite open-source workflow management tool for data-processing pipelines as directed acyclic graphs (DAGs). This is a growing space with open-source tools such as <a href="https://github.com/spotify/luigi">Luigi</a> and <a href="https://github.com/argoproj/argo">Argo</a> and vendor-specific tools such as <a href="https://azure.microsoft.com/en-us/services/data-factory/">Azure Data Factory</a> or <a href="https://aws.amazon.com/datapipeline/">AWS Data Pipeline</a>. However, Airflow differentiates itself with its programmatic definition of workflows over limited low-code configuration files, support for automated testing, open-source and multiplatform installation, rich set of integration points to the data ecosystem and large community support. In decentralized data architectures such as <a href="/radar/techniques/data-mesh">data mesh</a>, however, Airflow currently falls short as a centralized workflow orchestration.</p>
Helm,Adopt,Tools,FALSE,<p><strong><a href="http://helm.sh/">Helm</a></strong> is a package manager for <a href="/radar/platforms/kubernetes">Kubernetes</a>. It comes with a repository of curated Kubernetes applications that are maintained in the official <a href="https://github.com/helm/charts">Charts repository</a>. Since we last talked about Helm, Helm 3 has been released, and the most significant change is the removal of Tiller, the server-side component of Helm 2. The benefit of a design without Tiller is that you can only make changes to the Kubernetes cluster from the client side, that is, you can only modify the cluster according to the permissions you have as a user of the Helm command. We've used Helm in a number of client projects and its dependency management, templating and hook mechanism has greatly simplified the application lifecycle management in Kubernetes.</p>
